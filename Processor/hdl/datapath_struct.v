//
// Module Processor.datapath.struct
//
// Created:
//          by - 55011228.UNKNOWN (RMWO54602201)
//          at - 16:02:53 20/10/2009
//
// Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
//


module datapath( 
   DataIn, 
   Func, 
   InstructionIn, 
   LoadInstr, 
   PCSource, 
   RdAddrSel, 
   RegWt, 
   Reset, 
   SystemClk, 
   WtDataSel, 
   MemDataOut, 
   OpCode, 
   RAMAddress, 
   ROMAddress, 
   Zero
);


// Internal Declarations

input  [7:0]  DataIn;
input  [2:0]  Func;
input  [15:0] InstructionIn;
input         LoadInstr;
input         PCSource;
input         RdAddrSel;
input         RegWt;
input         Reset;
input         SystemClk;
input  [1:0]  WtDataSel;
output [7:0]  MemDataOut;
output [3:0]  OpCode;
output [7:0]  RAMAddress;
output [7:0]  ROMAddress;
output        Zero;


wire [7:0]   DataIn;
wire [2:0]   Func;
wire [15:0]  InstructionIn;
wire         LoadInstr;
wire         PCSource;
wire         RdAddrSel;
wire         RegWt;
wire         Reset;
wire         SystemClk;
wire [1:0]   WtDataSel;
wire [7:0]   MemDataOut;
wire [3:0]   OpCode;
wire [7:0]   RAMAddress;
wire [7:0]   ROMAddress;
wire         Zero;

// Local declarations

// Internal signal declarations
wire [7:0]  MemDataOutEXE;
wire [7:0]  Result;
wire [7:0]  dout;
wire [7:0]  dout1;
wire [7:0]  dout6;
wire [3:0]  dout7;
wire [7:0]  dout9;
wire [15:0] inst;
wire [2:0]  q;
wire        q1;
wire [7:0]  q10;
wire [7:0]  q11;
wire [7:0]  q12;
wire [1:0]  q13;
wire [1:0]  q14;
wire [1:0]  q15;
wire [7:0]  q16;
wire [7:0]  q17;
wire        q2;
wire        q3;
wire [3:0]  q4;
wire [3:0]  q5;
wire [3:0]  q6;
wire [7:0]  q7;
wire [7:0]  q8;
wire [7:0]  q9;
wire [7:0]  rdata1;
wire [7:0]  rdata2;

// ModuleWare signal declarations(v1.7) for instance 'I2' of 'adff'
reg [7:0] mw_I2reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I6' of 'adff'
reg [15:0] mw_I6reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I8' of 'adff'
reg [7:0] mw_I8reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I11' of 'adff'
reg [7:0] mw_I11reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I12' of 'adff'
reg [2:0] mw_I12reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I13' of 'adff'
reg [7:0] mw_I13reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I15' of 'adff'
reg mw_I15reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I16' of 'adff'
reg mw_I16reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I17' of 'adff'
reg mw_I17reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I18' of 'adff'
reg [3:0] mw_I18reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I19' of 'adff'
reg [3:0] mw_I19reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I20' of 'adff'
reg [3:0] mw_I20reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I22' of 'adff'
reg [7:0] mw_I22reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I23' of 'adff'
reg [7:0] mw_I23reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I24' of 'adff'
reg [7:0] mw_I24reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I25' of 'adff'
reg [7:0] mw_I25reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I26' of 'adff'
reg [7:0] mw_I26reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I27' of 'adff'
reg [7:0] mw_I27reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I28' of 'adff'
reg [1:0] mw_I28reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I29' of 'adff'
reg [1:0] mw_I29reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I30' of 'adff'
reg [1:0] mw_I30reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I31' of 'adff'
reg [7:0] mw_I31reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I32' of 'adff'
reg [7:0] mw_I32reg_cval;

// ModuleWare signal declarations(v1.7) for instance 'I1' of 'mux'
reg [7:0] mw_I1temp_dout;

// ModuleWare signal declarations(v1.7) for instance 'I3' of 'mux'
reg [3:0] mw_I3temp_dout;

// ModuleWare signal declarations(v1.7) for instance 'I21' of 'mux'
reg [7:0] mw_I21temp_dout;


// Instances 
BigALU I7( 
   .A      (MemDataOutEXE), 
   .B      (q16), 
   .Func   (q), 
   .Result (Result), 
   .Zero   ()
); 

RegFile I10( 
   .clk    (SystemClk), 
   .rst    (Reset), 
   .wrt    (q3), 
   .raddr0 (inst[3:0]), 
   .raddr1 (dout7), 
   .waddr  (q6), 
   .wdata  (dout9), 
   .rdata0 (rdata1), 
   .rdata1 (rdata2)
); 


// ModuleWare code(v1.7) for instance 'I0' of 'add'
assign {dout} = dout6 + ROMAddress;

// ModuleWare code(v1.7) for instance 'I2' of 'adff'
assign ROMAddress = mw_I2reg_cval;
always @(posedge SystemClk or posedge Reset)
begin : i2seq_proc
   if (Reset)
      mw_I2reg_cval = 8'd0;
   else
      mw_I2reg_cval = dout1;
end

// ModuleWare code(v1.7) for instance 'I6' of 'adff'
assign inst = mw_I6reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i6seq_proc
   if (Reset)
      mw_I6reg_cval = 16'd0;
   else if (LoadInstr) 
      mw_I6reg_cval = InstructionIn;
end

// ModuleWare code(v1.7) for instance 'I8' of 'adff'
assign MemDataOutEXE = mw_I8reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i8seq_proc
   if (Reset)
      mw_I8reg_cval = 8'd0;
   else
      mw_I8reg_cval = rdata2;
end

// ModuleWare code(v1.7) for instance 'I11' of 'adff'
assign q16 = mw_I11reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i11seq_proc
   if (Reset)
      mw_I11reg_cval = 8'd0;
   else
      mw_I11reg_cval = rdata1;
end

// ModuleWare code(v1.7) for instance 'I12' of 'adff'
assign q = mw_I12reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i12seq_proc
   if (Reset)
      mw_I12reg_cval = 3'd0;
   else
      mw_I12reg_cval = Func;
end

// ModuleWare code(v1.7) for instance 'I13' of 'adff'
assign q7 = mw_I13reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i13seq_proc
   if (Reset)
      mw_I13reg_cval = 8'd0;
   else
      mw_I13reg_cval = inst[7:0];
end

// ModuleWare code(v1.7) for instance 'I15' of 'adff'
assign q1 = mw_I15reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i15seq_proc
   if (Reset)
      mw_I15reg_cval = 1'd0;
   else
      mw_I15reg_cval = RegWt;
end

// ModuleWare code(v1.7) for instance 'I16' of 'adff'
assign q2 = mw_I16reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i16seq_proc
   if (Reset)
      mw_I16reg_cval = 1'd0;
   else
      mw_I16reg_cval = q1;
end

// ModuleWare code(v1.7) for instance 'I17' of 'adff'
assign q3 = mw_I17reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i17seq_proc
   if (Reset)
      mw_I17reg_cval = 1'd0;
   else
      mw_I17reg_cval = q2;
end

// ModuleWare code(v1.7) for instance 'I18' of 'adff'
assign q4 = mw_I18reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i18seq_proc
   if (Reset)
      mw_I18reg_cval = 4'd0;
   else
      mw_I18reg_cval = inst[11:8];
end

// ModuleWare code(v1.7) for instance 'I19' of 'adff'
assign q5 = mw_I19reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i19seq_proc
   if (Reset)
      mw_I19reg_cval = 4'd0;
   else
      mw_I19reg_cval = q4;
end

// ModuleWare code(v1.7) for instance 'I20' of 'adff'
assign q6 = mw_I20reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i20seq_proc
   if (Reset)
      mw_I20reg_cval = 4'd0;
   else
      mw_I20reg_cval = q5;
end

// ModuleWare code(v1.7) for instance 'I22' of 'adff'
assign q17 = mw_I22reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i22seq_proc
   if (Reset)
      mw_I22reg_cval = 8'd0;
   else
      mw_I22reg_cval = inst[7:0];
end

// ModuleWare code(v1.7) for instance 'I23' of 'adff'
assign q8 = mw_I23reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i23seq_proc
   if (Reset)
      mw_I23reg_cval = 8'd0;
   else
      mw_I23reg_cval = q7;
end

// ModuleWare code(v1.7) for instance 'I24' of 'adff'
assign q9 = mw_I24reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i24seq_proc
   if (Reset)
      mw_I24reg_cval = 8'd0;
   else
      mw_I24reg_cval = q8;
end

// ModuleWare code(v1.7) for instance 'I25' of 'adff'
assign q10 = mw_I25reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i25seq_proc
   if (Reset)
      mw_I25reg_cval = 8'd0;
   else
      mw_I25reg_cval = Result;
end

// ModuleWare code(v1.7) for instance 'I26' of 'adff'
assign q11 = mw_I26reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i26seq_proc
   if (Reset)
      mw_I26reg_cval = 8'd0;
   else
      mw_I26reg_cval = q10;
end

// ModuleWare code(v1.7) for instance 'I27' of 'adff'
assign q12 = mw_I27reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i27seq_proc
   if (Reset)
      mw_I27reg_cval = 8'd0;
   else
      mw_I27reg_cval = DataIn;
end

// ModuleWare code(v1.7) for instance 'I28' of 'adff'
assign q13 = mw_I28reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i28seq_proc
   if (Reset)
      mw_I28reg_cval = 2'd0;
   else
      mw_I28reg_cval = WtDataSel;
end

// ModuleWare code(v1.7) for instance 'I29' of 'adff'
assign q14 = mw_I29reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i29seq_proc
   if (Reset)
      mw_I29reg_cval = 2'd0;
   else
      mw_I29reg_cval = q13;
end

// ModuleWare code(v1.7) for instance 'I30' of 'adff'
assign q15 = mw_I30reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i30seq_proc
   if (Reset)
      mw_I30reg_cval = 2'd0;
   else
      mw_I30reg_cval = q14;
end

// ModuleWare code(v1.7) for instance 'I31' of 'adff'
assign MemDataOut = mw_I31reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i31seq_proc
   if (Reset)
      mw_I31reg_cval = 8'd0;
   else
      mw_I31reg_cval = MemDataOutEXE;
end

// ModuleWare code(v1.7) for instance 'I32' of 'adff'
assign RAMAddress = mw_I32reg_cval;
always @(negedge SystemClk or posedge Reset)
begin : i32seq_proc
   if (Reset)
      mw_I32reg_cval = 8'd0;
   else
      mw_I32reg_cval = q17;
end

// ModuleWare code(v1.7) for instance 'I14' of 'buff'
assign OpCode = inst[15:12];

// ModuleWare code(v1.7) for instance 'I4' of 'constval'
assign dout6 = 8'd1;

// ModuleWare code(v1.7) for instance 'I1' of 'mux'
always @(dout or inst[7:0] or PCSource)
begin : i1combo_proc
   case (PCSource)
      1'd0: mw_I1temp_dout = dout;
      1'd1: mw_I1temp_dout = inst[7:0];
      default: mw_I1temp_dout = 8'bx;
   endcase
end
assign dout1 = mw_I1temp_dout;

// ModuleWare code(v1.7) for instance 'I3' of 'mux'
always @(inst[7:4] or inst[11:8] or RdAddrSel)
begin : i3combo_proc
   case (RdAddrSel)
      1'd0: mw_I3temp_dout = inst[7:4];
      1'd1: mw_I3temp_dout = inst[11:8];
      default: mw_I3temp_dout = 4'bx;
   endcase
end
assign dout7 = mw_I3temp_dout;

// ModuleWare code(v1.7) for instance 'I21' of 'mux'
always @(q11 or q9 or q12 or q15)
begin : i21combo_proc
   case (q15)
      2'd0: mw_I21temp_dout = q11;
      2'd1: mw_I21temp_dout = q9;
      2'd2: mw_I21temp_dout = q12;
      default: mw_I21temp_dout = 8'bx;
   endcase
end
assign dout9 = mw_I21temp_dout;

// ModuleWare code(v1.7) for instance 'I5' of 'or'
assign Zero = rdata2[7] | rdata2[6] | rdata2[5] | rdata2[4] | rdata2[3]
              | rdata2[2] | rdata2[1] | rdata2[0];

endmodule // datapath

