//
// Module processorV2_lib.datapath.struct
//
// Created:
//          by - Administrator.UNKNOWN (BIGBLUE)
//          at - 20:12:17 23/01/2005
//
// Generated by Mentor Graphics' HDL Designer(TM) 2004.1 (Build 41)
//


module datapath( 
   ALUFunc, 
   Clk, 
   DMAddrSel, 
   DataInClk, 
   DataOutClk, 
   IODataIN, 
   MemWt, 
   PCClk, 
   PCSource, 
   RdAddrSel, 
   RegWt, 
   Reset, 
   SystemClk, 
   WtDataSel, 
   IODataOut, 
   OpCode, 
   Zero
);


// Internal Declarations

input        ALUFunc;
input        Clk;
input        DMAddrSel;
input        DataInClk;
input        DataOutClk;
input  [7:0] IODataIN;
input        MemWt;
input        PCClk;
input        PCSource;
input        RdAddrSel;
input        RegWt;
input        Reset;
input        SystemClk;
input  [1:0] WtDataSel;
output [7:0] IODataOut;
output [3:0] OpCode;
output       Zero;


wire         ALUFunc;
wire         Clk;
wire         DMAddrSel;
wire         DataInClk;
wire         DataOutClk;
wire [7:0]   IODataIN;
wire         MemWt;
wire         PCClk;
wire         PCSource;
wire         RdAddrSel;
wire         RegWt;
wire         Reset;
wire         SystemClk;
wire [1:0]   WtDataSel;
wire [7:0]   IODataOut;
wire [3:0]   OpCode;
wire         Zero;

// Local declarations

// Internal signal declarations
wire [7:0]  din0;
wire [7:0]  dout;
wire [7:0]  dout0;
wire [7:0]  dout1;
wire [15:0] dout2;
wire [7:0]  dout3;
wire [7:0]  dout4;
wire [7:0]  dout5;
wire [7:0]  dout6;
wire [3:0]  dout7;
wire [7:0]  dout9;
wire [15:0] inst;
wire [7:0]  q;
wire [7:0]  q1;

// ModuleWare signal declarations(v1.4) for instance 'I7' of 'addsub'
wire [8:0] mw_I7temp_dout;

// ModuleWare signal declarations(v1.4) for instance 'I2' of 'adff'
reg [7:0] mw_I2reg_cval;

// ModuleWare signal declarations(v1.4) for instance 'I6' of 'adff'
reg [15:0] mw_I6reg_cval;

// ModuleWare signal declarations(v1.4) for instance 'I11' of 'adff'
reg [7:0] mw_I11reg_cval;

// ModuleWare signal declarations(v1.4) for instance 'I12' of 'adff'
reg [7:0] mw_I12reg_cval;

// ModuleWare signal declarations(v1.4) for instance 'I1' of 'mux'
reg [7:0] mw_I1temp_dout;

// ModuleWare signal declarations(v1.4) for instance 'I3' of 'mux'
reg [3:0] mw_I3temp_dout;

// ModuleWare signal declarations(v1.4) for instance 'I9' of 'mux'
reg [7:0] mw_I9temp_dout;

// ModuleWare signal declarations(v1.4) for instance 'I10' of 'mux'
reg [7:0] mw_I10temp_dout;

// ModuleWare signal declarations(v1.4) for instance 'I15' of 'ramsp'
reg [7:0] mw_I15addr_reg;
reg [7:0] mw_I15ram_table[((9'b1<<8) -1):0];
integer mw_I15i;
initial
begin
   for (mw_I15i= 0;mw_I15i<= ((9'b1<<8) -1);mw_I15i= mw_I15i+1)
      mw_I15ram_table[mw_I15i] = 8'd0;
end


// Instances 
InstructionROM I5( 
   .ADDR        (q), 
   .INSTRUCTION (dout2)
); 

RegFile I16( 
   .clk    (Clk), 
   .rst    (Reset), 
   .wrt    (RegWt), 
   .raddr0 (inst[3:0]), 
   .raddr1 (dout7), 
   .waddr  (inst[11:8]), 
   .wdata  (dout9), 
   .rdata0 (dout0), 
   .rdata1 (dout4)
); 


// ModuleWare code(v1.4) for instance 'I0' of 'add'
assign {dout} = dout6 + q;

// ModuleWare code(v1.4) for instance 'I7' of 'addsub'
assign mw_I7temp_dout = ~ALUFunc ? {dout4[7], dout4} + {dout0[7], dout0}
    : {dout4[7], dout4} - {dout0[7], dout0};
assign din0 = mw_I7temp_dout;

// ModuleWare code(v1.4) for instance 'I2' of 'adff'
assign q = mw_I2reg_cval;
// pragma async_set_reset_local of I2seq_proc "Reset"
always @(posedge PCClk or posedge Reset)
begin : I2seq_proc
   if (Reset)
      mw_I2reg_cval = 8'd0;
   else
      mw_I2reg_cval = dout1;
end

// ModuleWare code(v1.4) for instance 'I6' of 'adff'
assign inst = mw_I6reg_cval;
// pragma async_set_reset_local of I6seq_proc "Reset"
always @(posedge Clk or posedge Reset)
begin : I6seq_proc
   if (Reset)
      mw_I6reg_cval = 16'd0;
   else
      mw_I6reg_cval = dout2;
end

// ModuleWare code(v1.4) for instance 'I11' of 'adff'
assign q1 = mw_I11reg_cval;
// pragma async_set_reset_local of I11seq_proc "Reset"
always @(posedge DataInClk or posedge Reset)
begin : I11seq_proc
   if (Reset)
      mw_I11reg_cval = 8'd0;
   else
      mw_I11reg_cval = IODataIN;
end

// ModuleWare code(v1.4) for instance 'I12' of 'adff'
assign IODataOut = mw_I12reg_cval;
// pragma async_set_reset_local of I12seq_proc "Reset"
always @(posedge DataOutClk or posedge Reset)
begin : I12seq_proc
   if (Reset)
      mw_I12reg_cval = 8'd0;
   else
      mw_I12reg_cval = dout0;
end

// ModuleWare code(v1.4) for instance 'I14' of 'buff'
assign OpCode = inst[15:12];

// ModuleWare code(v1.4) for instance 'I4' of 'constval'
assign dout6 = 8'd1;

// ModuleWare code(v1.4) for instance 'I1' of 'mux'
always @(dout or inst[7:0] or PCSource)
begin
   case (PCSource)
      1'd0: mw_I1temp_dout = dout;
      1'd1: mw_I1temp_dout = inst[7:0];
      default: mw_I1temp_dout = 8'bx;
   endcase
end
assign dout1 = mw_I1temp_dout;

// ModuleWare code(v1.4) for instance 'I3' of 'mux'
always @(inst[11:8] or inst[7:4] or RdAddrSel)
begin
   case (RdAddrSel)
      1'd0: mw_I3temp_dout = inst[11:8];
      1'd1: mw_I3temp_dout = inst[7:4];
      default: mw_I3temp_dout = 4'bx;
   endcase
end
assign dout7 = mw_I3temp_dout;

// ModuleWare code(v1.4) for instance 'I9' of 'mux'
always @(din0 or inst[7:0] or dout3 or q1 or WtDataSel)
begin
   case (WtDataSel)
      2'd0: mw_I9temp_dout = din0;
      2'd1: mw_I9temp_dout = inst[7:0];
      2'd2: mw_I9temp_dout = dout3;
      2'd3: mw_I9temp_dout = q1;
      default: mw_I9temp_dout = 8'bx;
   endcase
end
assign dout9 = mw_I9temp_dout;

// ModuleWare code(v1.4) for instance 'I10' of 'mux'
always @(inst[7:0] or dout0 or DMAddrSel)
begin
   case (DMAddrSel)
      1'd0: mw_I10temp_dout = inst[7:0];
      1'd1: mw_I10temp_dout = dout0;
      default: mw_I10temp_dout = 8'bx;
   endcase
end
assign dout5 = mw_I10temp_dout;

// ModuleWare code(v1.4) for instance 'I13' of 'or'
assign Zero = dout4[0] | dout4[1] | dout4[2] | dout4[3] | dout4[4]
              | dout4[5] | dout4[6] | dout4[7];

// ModuleWare code(v1.4) for instance 'I15' of 'ramsp'
// pragma attribute ram_table block_ram false;
always @(posedge SystemClk)
begin
   if (MemWt) begin
      mw_I15ram_table[dout5] = dout4;
   end
   mw_I15addr_reg = dout5;
end
assign dout3 = mw_I15ram_table[mw_I15addr_reg];

endmodule // datapath

